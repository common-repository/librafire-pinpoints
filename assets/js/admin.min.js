var draggable_obj = {
    start: function (event, ui) {
        jQuery(this).data('preventBehaviour', true);
        jQuery(this).addClass('active_dot');
    },
    containment: "parent",
    drag: function() {
        var $this = jQuery(this);
        var thisPos = $this.position();
        var parentPos = $this.parent().position();

        var x = thisPos.left - parentPos.left;
        var y = thisPos.top - parentPos.top;

    },
    stop: function( event, ui ) {
        var coordinates = get_dot_position( this, jQuery(this).css("left"), jQuery(this).css("top") );
        jQuery(this).find( 'input' )[0].value = coordinates.left + "|" + coordinates.top;
        jQuery(this).removeClass('active_dot');
        save_dots(event);
    },
    cancel: ".dot_controlls"
}

//Get the dot position relative to parent (in %)
function get_dot_position( elem, left, top ){
    var coordinates = {
        left: 0,
        top: 0
    };
    var containerWidthPercent = jQuery(".dots-container").width() / 100;
    var containerHeightPercent = jQuery(".dots-container").height() / 100;

    var dotScaleX = jQuery(elem).width() * 100 / jQuery(".dots-container").width();
    var dotScaleY = jQuery(elem).height() * 100 / jQuery(".dots-container").height();

    var leftCoord = parseInt(left);
    var topCoord = parseInt(top);
    // - ( jQuery("#dots_scale").val() / 2 )
    coordinates.left = ( leftCoord / containerWidthPercent );
    coordinates.top = ( topCoord / containerHeightPercent );

    return coordinates;
}

// Ready!
jQuery( document ).ready( function ( $ ) {

    if( $("#preview_image").length > 0 ){
        if( $("#preview_image").attr('src').length > 0 ){
            $("#step-2").removeClass('disabled');
        }
    }
    if( $(".lf_single_dot_container").length > 0 ){
        $("#step-3").removeClass('disabled');
    }
    if( jQuery("#lf_single_dot_color").val() != "" ){
        jQuery("#step-4").removeClass('disabled');
        jQuery("#step-5").removeClass('disabled');
        jQuery("#step-6").removeClass('disabled');
    }

    $(":input").each(function () {
        $(this).data("previousValue", $(this).val());
    });

    // Caption background color pointer
    $('span.step-5').pointer({
        content: '<h3>Caption background color</h3><p>Background color of the caption area behind the text.</p>',
        position: {
            edge: 'left',
            align: 'middle'
        },
        close: function() {
            // This function is fired when you click the close button
        }
    });
    // Background image pointer
    $('span.step-1').pointer({
        content: '<h3>Section background image </h3><p>Section background image that will be displayed behind the dots.</p>',
        position: {
            edge: 'left',
            align: 'middle'
        },
        close: function() {
            // This function is fired when you click the close button
        }
    });


    $(".lf_single_dot_container").draggable(draggable_obj);


    // Uploading files
    var file_frame;
    jQuery('#upload_image_button').live('click', function(podcast) {

        podcast.preventDefault();

        // If the media frame already exists, reopen it.
        if (file_frame) {
            file_frame.open();
            return;
        }

        // Create the media frame.
        file_frame = wp.media.frames.file_frame = wp.media({
            title: jQuery(this).data('uploader_title'),
            button: {
                text: jQuery(this).data('uploader_button_text'),
            },
            multiple: false // Set to true to allow multiple files to be selected
        });

        // When a file is selected, run a callback.
        file_frame.on('select', function(){
            // We set multiple to false so only get one image from the uploader
            attachment = file_frame.state().get('selection').first().toJSON();

            // here are some of the variables you could use for the attachment;
            //var all = JSON.stringify( attachment );
            //var id = attachment.id;
            //var title = attachment.title;
            //var filename = attachment.filename;
            var url = attachment.url;
            //var link = attachment.link;
            //var alt = attachment.alt;
            //var author = attachment.author;
            //var description = attachment.description;
            //var caption = attachment.caption;
            //var name = attachment.name;
            //var status = attachment.status;
            //var uploadedTo = attachment.uploadedTo;
            //var date = attachment.date;
            //var modified = attachment.modified;
            //var type = attachment.type;
            //var subtype = attachment.subtype;
            //var icon = attachment.icon;
            //var dateFormatted = attachment.dateFormatted;
            //var editLink = attachment.editLink;
            //var fileLength = attachment.fileLength;

            jQuery("#preview_image").attr( 'src', url);
            jQuery("#preview_image_src").val( url );
            jQuery("#add_more_dots").attr( 'disabled', false);
            jQuery(".conditional_show").removeClass('conditional_show');
            if( jQuery("#preview_image").attr('src') != '' ){
                jQuery("#step-2").removeClass('disabled');
            }
        });

        // Finally, open the modal
        file_frame.open();
    });

    $(".lf_single_dot_container").on( 'click', function(e){

        if( $(this).hasClass('changing_dot') ) return;

        $(".lf_single_dot_container").removeClass( 'changing_dot changing_added_dot' );
        $('.dot_controlls').hide();
        $(this).addClass("changing_dot").find('.dot_controlls').show( 400 );
    });

    $(".remove_dot").on( 'click', function(e){
        $that = this
        $( $($that).data('parent') ).toggle('hide', function(){
            $( $($that).data('parent') ).remove()
        });
    });

    $(".minimize_dot").on( 'click', function(e){
        $that = this;
        //$( $($that).data('parent') ).removeClass( 'changing_dot' );
        $( this ).parent().toggle('hide', function(){
            $( $($that).data('parent') ).removeClass( 'changing_dot changing_added_dot' );
        });
    });

});

//Bind save post dots click
jQuery( document ).on( 'click', '#save_post_dots', save_dots );

function save_dots(e){
    if(e.target.id == 'publish' )
        e.preventDefault();

    jQuery(e.target).addClass('disabled');

    jQuery(".dots-container").addClass('saving-post');

    var dots_data = {};
    dots_data['action']             = 'save_dots';
    dots_data['post_id']            = jQuery("#post_ID").val();
    dots_data['security']           = jQuery( '#wpt_pinpoints_noncename' ).val();
    dots_data['dots']               = '{"dots_json":[],"dots_color":[],"dots_image":[],"dots_scale":[],"dots_bg_color":[]}';

    var objDots = JSON.parse( dots_data['dots'] );

    jQuery(".lf_single_dot_container").each( function(e, a){
        var that = this;

        var single_dot_data = {
            position    : jQuery(that).find('.lf_single_dot').val(),
            captionText : tinyMCE.get( a.getElementsByTagName('textarea')[0].id ).getContent().replace(/"/g, "'"),
            dot_id      : that.id
        }

        objDots['dots_json'].push( single_dot_data );

    });


    objDots['dots_color'].push( { 'value'       :  jQuery("#post_dots_color").val() } );
    objDots['dots_image'].push( { 'value'       :  jQuery("#preview_image_src").val() } );
    objDots['dots_scale'].push( { 'value'       :  jQuery("#dots_scale").val() } );
    objDots['dots_bg_color'].push( { 'value'    :  jQuery("#dots_bg_color").val() } );

    dots_data['dots'] = JSON.stringify( objDots );

    jQuery.ajax({
            url: ajaxurl,
            type: 'POST',
            data: dots_data
        })
        .success(function( response ) {
            jQuery(".dots-container").removeClass('saving-post');
            jQuery(e.target).removeClass('disabled');
            if( jQuery(".updated-lf-success").length > 0 ){
                jQuery(".updated-lf-success").slideDown();
            }

            if( e.target.id == 'publish' )
                jQuery("#publish").trigger('click');

        })
        .fail(function(e) {
            console.log(e);
        });

}
//Save dots handler
//jQuery( document ).on( 'click', '#save_post_dots:not(.disabled), #publish', function(e){
//
//
//});

//Add more dots handler
jQuery(document).on( 'click', "#add_more_dots", function(){

    // Generate random number for currently created element.
    var element_id = new Date().getTime();

    // Main element wrapper
    var element = jQuery("<div />");

    // Append data and attributes to main element wrapper
    jQuery( element )
        .attr( 'class', 'lf_single_dot_container added_dot changing_added_dot')
        .css( 'background-color', jQuery( '#lf_single_dot_color' ).wpColorPicker('color'))
        .attr( 'id', element_id );

    // Create element for pulsating effect.
    var pulsatingCircle = jQuery( element).append( '<div class="relative-elem full-size"><span class="pulsating-circle"></span></div>');

    // Change the ring border color
    jQuery( pulsatingCircle).find( ".pulsating-circle" ).css( 'border-color', jQuery( '#lf_single_dot_color' ).wpColorPicker('color') );

    // Append hidden field which will hold the postiion value data
    jQuery( element ).append('<input type="hidden" name="lf_custom_dot_pointer[]" class="lf_single_dot" value="" />');

    // Create wrapper that will hold the controlls for the buttons
    var dot_controlls = jQuery( '<div />' ).addClass( 'dot_controlls added_controlls' );

    // Create the remove dot button
    var remove_dot = jQuery( '<span />')
        .attr( 'data-parent', "#" + element_id )
        .addClass( 'remove_dot' )
        .text('x').appendTo( jQuery( dot_controlls ) );

    // Create the minimize dot button
    var minimize_dot = jQuery( '<span />')
        .attr( 'data-parent', "#" + element_id )
        .addClass( 'minimize_dot' )
        .text('_').appendTo( jQuery( dot_controlls ) );

    // Bind click event to newly created element
    jQuery(remove_dot).on( 'click', function(e){
        $that = this;
        jQuery( jQuery($that).data('parent') ).toggle('hide', function(){
            jQuery( jQuery($that).data('parent') ).remove()
        });
    });

    // Bind click event to newly created element
    jQuery(minimize_dot).on( 'click', function(e){
        var $that = this;
        jQuery( this ).parent().toggle('hide', function(){
            jQuery( jQuery($that).data('parent') ).removeClass( 'changing_dot changing_added_dot' );
        });
    });



    // Create the textarea
    var textarea = jQuery( '<textarea />')
        .attr( 'id', 'caption_text_' + element_id )
        .appendTo( jQuery( dot_controlls ) );

    jQuery(element ).on( 'click', function(e){

        if( jQuery(this).hasClass('changing_dot') ) return;

        jQuery(".lf_single_dot_container").removeClass( 'changing_dot' );
        jQuery('.dot_controlls').hide();
        jQuery(this).addClass("changing_dot").find('.dot_controlls').show( 400 );
    });

    jQuery( element ).append( jQuery( dot_controlls ) );

    jQuery( element ).appendTo( '.dots-container' );
    jQuery( element ).draggable( draggable_obj );
    tinymce.init({
        mode : "exact",
        elements : jQuery(textarea).attr('id'),
        theme : "modern",
        height:"250",
        menubar: '',
        entity_encoding: false,
        //width:"600",

        // Theme options
        theme_advanced_buttons1 : "save,newdocument,|,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,code",
        theme_advanced_buttons2 : "",
        theme_advanced_buttons3 : "",
        theme_advanced_toolbar_location : "top",
        theme_advanced_toolbar_align : "left",
        theme_advanced_statusbar_location : "bottom",
        theme_advanced_resizing : true,
    });
    jQuery('#dots_scale').trigger( 'change' );

    if( jQuery(".lf_single_dot_container").length > 0 && jQuery("#step-3").hasClass('disabled') ){
        jQuery("#step-3").removeClass('disabled');
    }
});

// Resize dots handler
jQuery(document).on( 'keyup change click', '#dots_scale', function(){

    var element = jQuery(".lf_single_dot_container");

    jQuery(element).css({
        height: jQuery('#dots_scale').val()  + 'px',
        width: jQuery('#dots_scale').val() + 'px'
    });
});

// Helper function to remove element node
function remove(id) {
    return (elem=document.getElementById(id)).parentNode.removeChild(elem);
}

// Pointers
jQuery('span.step-1').on( 'click', function(){
    jQuery("span.step-1").pointer('open');
} );
jQuery('span.step-5').on( 'click', function(){
    jQuery("span.step-5").pointer('open');
} );
jQuery(".notice-lf .notice-dismiss").on( 'click', function(){
    jQuery(this).parent().slideUp(500);
});

// Multiselect
jQuery('select[multiple]').multiselect({
    columns: 1,
    placeholder: 'Select options'
});